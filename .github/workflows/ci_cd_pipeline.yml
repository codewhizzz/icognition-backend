name: CI/CD Pipeline for FastAPI Application

on:
  push:
    branches:
      - main  # Trigger deployment to production on pushes to 'main'
      - develop  # Trigger deployment to staging on pushes to 'develop'

jobs:
  setup-environment-variables:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      database_url: ${{ steps.set-db-url.outputs.database_url }}
    steps:
      - id: set-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "::set-output name=environment::staging"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "::set-output name=environment::production"
          fi
      - id: set-db-url
        run: |
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "::set-output name=database_url::${{ secrets.STAGING_DATABASE_URL }}"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "::set-output name=database_url::${{ secrets.PRODUCTION_DATABASE_URL }}"
          fi

  test:
    needs: setup-environment-variables
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set DATABASE_URL for testing
        run: echo "DATABASE_URL=${{ needs.setup-environment-variables.outputs.database_url }}" >> $GITHUB_ENV
      - name: Run tests
        run: |
          pytest
          echo "Tests completed for environment: ${{ needs.setup-environment-variables.outputs.environment }}"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Authenticate with Google Cloud
        uses: google-github-actions/setup-gcloud@latest  # Using the latest version
        with:
          service_account_key: ${{ secrets['GCP_SA_KEY_' + needs.setup-environment-variables.outputs.environment | upper] }}
          project_id: ${{ needs.setup-environment-variables.outputs.environment == 'staging' && 'stage-413302' || 'micro-harmony-413302' }}
      - name: Configure gcloud CLI
        run: gcloud config set project ${{ needs.setup-environment-variables.outputs.environment == 'staging' && 'stage-413302' || 'micro-harmony-413302' }}
      - name: Deploy to Google App Engine
        run: |
          gcloud app deploy app.yaml --quiet
          echo "Deployed to ${{ needs.setup-environment-variables.outputs.environment }} environment"
      - name: Run Alembic migrations
        run: |
          alembic upgrade head
          echo "Alembic migrations completed for ${{ needs.setup-environment-variables.outputs.environment }} environment"
        env:
          DATABASE_URL: ${{ needs.setup-environment-variables.outputs.database_url }}

